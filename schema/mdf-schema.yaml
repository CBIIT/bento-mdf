$schema: http://json-schema.org/draft-06/schema#
$id: http://cbiit.github./bento-mdf/schema/mdf-schema.yaml


# "uniqueItems" : true - to insure an array is unique
# still need to check that the document itself doesn't contain duplicate
# object keys?

# since the keys to the top-level objects are data (the names of nodes,
# relationships, and properties), want to control the spec of those keys
# draft 6 of JSONSchema has propertyNames property to do this

type: object
properties:
  Nodes:
    propertyNames:
      $ref: "#/defs/snake_case_id"
    additionalProperties:
      $ref: "#/defs/nodeSpec"
  Relationships:
    propertyNames:
      $ref: "#/defs/snake_case_id"
    additionalProperties:
      $ref: "#/defs/relnSpec"
  PropDefinitions:
    propertyNames:
      $ref: "#/defs/snake_case_id"
    additionalProperties:
      $ref: "#/defs/propSpec"
  UniversalNodeProperties:
    type: object
    properties:
      mustHave:
        desc: |
          items are names of properties that every node *must* have;
          properties are defined in PropDefinitions
        type: array
        items:
          $ref: "#/defs/snake_case_id"
      mayHave:
        desc: |
          items are names of properties that every node *may* have;
          properties are defined in PropDefinitions
        type: array
        items:
          $ref: "#/defs/snake_case_id"
  UniversalRelationshipProperties:
    type: object
    properties:
      mustHave:
        desc: |
          items are names of properties that every relationship *must* have;
          properties are defined in PropDefinitions      
        type: array
        items:
          $ref: "#/defs/snake_case_id"
      mayHave:
        desc: |
          items are names of properties that every relationship *may* have;
          properties are defined in PropDefinitions      
        type: array
        items:
          $ref: "#/defs/snake_case_id"
  Tags:
    $ref: "#/defs/tagsSpec"
  Handle:
    type: string
    desc: |
      This is a human-readable short name for the model described in the MDF, that
      should also be understood as a token that can be used to extract the model
      from a Metamodel Database
  URI:
    $ref: "#/defs/url"
    desc: |
      If present, this should be a resolving URL that can provide further detailed information
      about the model described in the MDF instance. Ideally, it should be the base URL for a
      terminology server (like the Simple Terminology Server), that can be concatenated with
      path information in the MDF to return details. Currently, an enumerated value set can
      be included "by reference" in the MDF, using a path. Joining the URL value and the
      path value with a backslash should create a url that resolves to a REST GET access of
      an STS that can return the actual list of enumerated values.
    
      
    
required:
  - Nodes
  - Relationships

propertyNames:
  $ref: "#/defs/camelCaseId"

additionalProperties: true

defs:
  snake_case_id:
    $id: "#snake_case_id"
    type: string
    pattern: "^[A-Za-z_][A-Za-z0-9_]*$"
  camelCaseId:
    $id: "#camelCaseId"
    type: string
    pattern: "^[A-Z][A-Za-z]*$"
  fileNameId:
    $id: "#fileNameId"
    type: string
    pattern: "^[A-Za-z0-9_-~/.]+\\.json|jsn|yml|yaml$"
  url:
    $id: "#url"
    type: string
    pattern: |
      ((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)
  path:
    $id: "#path"
    type: string
    pattern: |
      /?[A-Za-z0-9_][A-Za-z0-9._-~]*(?:/[A-Za-z0-9_][A-Za-z0-9._-~]*)*
  regex:
    $id: "#regex"
    type: object
    properties:
      pattern:
        type: string
      flavor:
        description: |
          Can tag as JS, Perl, egrep, whatever, here (optional)
        type: string
    required:
      - pattern
  simpleType:
    description: |
      simpleType (a scalar)
    type: string
    enum:
      - number
      - integer
      - string
      - datetime
      - url
      - boolean
      - TBD
  enumType:
    type:
      array
    description: |
      enumType (an array - could be size 1; or a reference to value
      domain api)
    items:
      oneOf:
        -
          type:
            string
        -
          $ref:
            "#/defs/url"
        -
          $ref:
            "#/defs/path"
    uniqueItems: true
  numberWithUnits:
    $id: "#numberWithUnits"
    type: object
    description: |
      numberWithUnits must have a "value_type" which is either "integer" or
      "number", and a "units" property,which can be a singleton array of a simple string (e.g. "mg"),
      or a regex ( "pattern" : ^<regexp>$ ), or an enumeration (array of allowed
      units strings, or ref to the term server)
    properties:
      value_type:
        type: string
        enum:
          - integer
          - number
      units:
        oneOf:
          -
            type: array
            items:
              -
                $ref: "#/defs/regex"
            uniqueItems: true
          -
            $ref: "#/defs/enumType"
      Tags:
        $ref: "#/defs/tagsSpec"
    required:
      - value_type
      - units
  unionType:
    $id: "#unionType"
    description: |
      A unionType is an array of other types, at least one of which the
      associated value must comply with. Analogous to the Union in Avro
      (https://avro.apache.org/docs/current/spec.html#Unions)
    type: array
    items:
      anyOf:
        - $ref: "#/defs/simpleType"
        - $ref: "#/defs/enumType"
        - $ref: "#/defs/numberWithUnits"
  listType:
    $id: "#listType"
    type: object
    description: |
      listType indicates that such a value should be instantiated as a list or array of
      scalar values. The type each of the scalar values should take is provided by the
      "item_type" property defined here. The item_type can be any of the scalar types
      defined in this schema. A listType of { "value_type":"list", "items": <an enumType> }
      would indicate that the data value should consist of an array of strings, each
      string coming from the specified enum of acceptable values.
    properties:
      value_type:
        const: list
      item_type:
        oneOf:
          -
            $ref: "#/defs/simpleType"
          -
            $ref: "#/defs/enumType"
          -
            $ref: "#/defs/numberWithUnits"
      Tags:
        $ref: "#/defs/tagsSpec"
    required:
      - value_type
      - item_type
  # kvType:
  #   type: object
  #   properties:
  #     key:
  #       type: string
  #       value:
  #         type: string
  tagsSpec:
    $id: "#tagsSpec"
    oneOf:
        - type: array
          items: string
          uniqueItems: true
        - type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: boolean
              
  nodeSpec:
    $id: "#nodeSpec"
    type: object
    properties:
      Props:
        oneOf:
          -
            type: array
            items:
              $ref: "#/defs/snake_case_id"
            uniqueItems: true
          -
            type:
              "null"
      Category:
        $ref: "#/defs/snake_case_id"
      Tags:
        $ref: "#/defs/tagsSpec"
    required:
      - Props
  relnSpec:
    $id: "#relnSpec"
    type: object
    properties:
      Mul:
        # here, the "default" multiplicity for all Src->Dst pairs
        type: string
        enum:
          - one_to_one
          - one_to_many
          - many_to_one
          - many_to_many
      Props:
        oneOf:
          -
            type: array
            items:
              $ref: "#/defs/snake_case_id"
            uniqueItems: true
          -
            type:
              "null"
      Ends:
        type: array
        items:
          type: object
          properties:
            Src:
              $ref: "#/defs/snake_case_id"
              # and need to be nodes defined in Nodes:
            Dst:
              $ref: "#/defs/snake_case_id"
              # and need to be nodes defined in Nodes:
            Mul:
              # here, Src->Dst specific multiplicity
              # overrides default above
              type: string
              enum:
                - one_to_one
                - one_to_many
                - many_to_one
                - many_to_many
            Tags:
              $ref: "#/defs/tagsSpec"
          uniqueItems: true
          required:
            - Src
            - Dst
      Tags:
        $ref: "#/defs/tagsSpec"
    required:
      - Props
      - Mul
      - Ends
  propSpec:
    $id: "#propSpec"
    type: object
    properties:
      Desc:
        description: |
          Property description, free text
        type: string
      Src:
        description: |
          Original data source of this property (e.g., the clinical report form)
        type: string
      Nul:
        type: boolean
      Req:
        type: boolean
      Deprecated:
        type: boolean
      Type:
        description: |
          Property values can have (1) simple types (number, integer, string
          datetime, or --if necessary-- "TBD"; (2) a number_with_units type
          (e.g., { "value_type":"integer", "units":"mm" }); (3) a regular
          expression that a (string) value must match; (4) an enumeration
          of acceptable values, or a url or path fragment to an api that will validate against
          such a list
        oneOf:
          -
            $ref: "#/defs/simpleType"
          -
            $ref: "#/defs/numberWithUnits"
          -
            $ref: "#/defs/regex"
          -
            $ref: "#/defs/url"
          -
            $ref: "#/defs/enumType"
          -
             $ref: "#/defs/listType"
          -
            $ref: "#/defs/unionType"
      Tags:
        $ref: "#/defs/tagsSpec"
    required:
      - Type
      
